<!--
Copyright © 2024 Sascha Lohaus (sascha.lohaus@gmail.com)
This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
-->

<ResourceDictionary
                          x:Class="NINA.StarMessenger.Communication.Trigger.Pushover.SendStarMessageToPushoverByConditionTriggerView"
                          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                          xmlns:nina="clr-namespace:NINA.View.Sequencer;assembly=NINA.Sequencer"
                          xmlns:converters="clr-namespace:NINA.Core.Utility.Converters;assembly=NINA.Core"
                          xmlns:pushover="clr-namespace:NINA.StarMessenger.Communication.Trigger.Pushover"
                          xmlns:customControlLibrary="clr-namespace:NINA.CustomControlLibrary;assembly=NINA.CustomControlLibrary"
                          xmlns:local="clr-namespace:NINA.StarMessenger.Communication.Trigger">
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <local:StatusToBrushConverter x:Key="StatusColorConverter" />
    <DataTemplate DataType="{x:Type pushover:SendStarMessageToPushoverByConditionTrigger}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" >
                        <ItemsControl ItemsSource="{Binding Conditions}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>

                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock VerticalAlignment="Center" Text="Condition: " Margin="0,0,5,0" />

                                        <ComboBox
                                Width="140"
                                Margin="0,0,5,0"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                HorizontalContentAlignment="Left"
                                ItemsSource="{Binding PropertiesForCondition}"
                                SelectedItem="{Binding SelectedPropertyForCondition, Mode=TwoWay}">
                                            <ComboBox.ItemContainerStyle>
                                                <Style TargetType="ComboBoxItem">
                                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                </Style>
                                            </ComboBox.ItemContainerStyle>
                                            <ComboBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding PropertyUserFriendlyName}" TextAlignment="Left"/>
                                                </DataTemplate>
                                            </ComboBox.ItemTemplate>
                                        </ComboBox>

                                        <ComboBox
                                Width="5"
                                Margin="0,0,5,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                HorizontalContentAlignment="Center"
                                ItemsSource="{Binding OperatorsForCondition}"
                                SelectedItem="{Binding SelectedOperatorForCondition, Mode=TwoWay}" />

                                        <TextBox MinWidth="60"
                                     Margin="5,3,0,3"
                                     MaxLines="1"
                                     TextWrapping="NoWrap"
                                     TextAlignment="Left"
                                     Height="25"
                                     Text="{Binding ValueForCondition, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, Mode=TwoWay}"/>


                                        <TextBlock VerticalAlignment="Center" Text="Consecutive Count:" Margin="10,0,10,0">
                                            <TextBlock.ToolTip>
                                                <ToolTip>
                                                    <TextBlock>
                                                    <Run FontWeight="Bold">Consecutive Count:</Run>
                                                    <LineBreak/>
                                                    Number of consecutive condition matches required before a StarMessage is sent.
                                                    <LineBreak/>
                                                    1: StarMessage is directly sent if condition is fullfiled for the first time. 
                                                    <LineBreak/>
                                                    2: StarMessage will be sent after the condition has been fulfilled twice in succession
                                                    <LineBreak/>
                                                    3: StarMessage will be sent after the condition has been fulfilled three times in succession
                                                    <LineBreak/>
                                                    etc.
                                                    <LineBreak/>
                                                    <LineBreak/>
                                                    If the condition is not met, the counter is reset again
                                                    <LineBreak/>
                                                    </TextBlock>
                                                </ToolTip>
                                            </TextBlock.ToolTip>
                                        </TextBlock>


                                        <TextBox MinWidth="30"
                                             Margin="0,3,0,3"
                                             MaxLines="1"
                                             TextWrapping="NoWrap"
                                             TextAlignment="Left"
                                             Height="25"
                                             Text="{Binding AimedConsecutiveCount, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, Mode=TwoWay}"/>


                                        <TextBlock Margin="5,7,0,0" FontWeight="Bold"
                                                   Foreground="{Binding ConsecutiveCountStatusLevel, Converter={StaticResource StatusColorConverter}}">

                                                    <Run Text="(" />
                                                    <Run Text="{Binding Path=CurrentConsecutiveCount}" />
                                                    <Run Text=")" />


                                            <TextBlock.ToolTip>
                                                <ToolTip>
                                                    <TextBlock>
                                                      Number of times the condition has been met consecutively.
                                                    </TextBlock>
                                                </ToolTip>
                                            </TextBlock.ToolTip>
                                            
                                        </TextBlock>

                                        <TextBlock Margin="10,7,0,0" Text="or" Visibility="{Binding Path=IsOrTextVisible, Converter={StaticResource BoolToVisibilityConverter}}" />
                                    </StackPanel>

                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <customControlLibrary:AsyncProcessButton
                        HorizontalAlignment="Left"
                        Margin="0,0,0,5"
                         Width="328" Height="25"
                        ButtonForegroundBrush="{StaticResource ButtonForegroundBrush}"
                         ButtonText="Add Condition"
                        Command="{Binding AddConditionCommand}" 
                        LoadingImageBrush="{StaticResource PrimaryBrush}" />

                        <customControlLibrary:AsyncProcessButton
                        HorizontalAlignment="Left"
                        Width="328" Height="25"
                        ButtonForegroundBrush="{StaticResource ButtonForegroundBrush}"
                        ButtonText="Remove last Condition"
                        Command="{Binding RemoveConditionCommand}" 
                        LoadingImageBrush="{StaticResource PrimaryBrush}" />
                    </StackPanel>
                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                        <TextBlock  Margin="5,3,0,3" VerticalAlignment="Center" Text="Notification Sound" />

                        <ComboBox
                            Width="140"
                            Margin="5,3,5,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            HorizontalContentAlignment="Left"
                            ItemsSource="{Binding SoundTypes}"
                            SelectedItem="{Binding NotificationSound, Mode=TwoWay}">
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="ComboBoxItem">
                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </ComboBox>
                    </StackPanel>

                    <StackPanel Grid.Column="2" Orientation="Horizontal">
                        <TextBlock  Margin="10,3,0,3" VerticalAlignment="Center" Text="Priority" />
                        <ComboBox
                        Width="100"
                        Margin="5,3,0,3"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        HorizontalContentAlignment="Left"
                        ItemsSource="{Binding PriorityTypes}"
                        SelectedItem="{Binding Priority, Mode=TwoWay}">
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="ComboBoxItem">
                                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                        </ComboBox>
                    </StackPanel>
                </Grid>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>


    <GeometryGroup x:Key="StarMessageTriggerIcon">
        <PathGeometry Figures="m 86.8485 97.9123 v 15.0368 l -4.6228 5.3848 h -32.0548 l -4.572 -5.2324 h 28.6004 l 1.8796 -2.1844 v -7.7724 h -29.1084 V 88.4127 l 4.826 -5.6388 h 36.2712 l -4.4704 5.2324 h -23.7236 l -2.286 2.5908 v 7.3152 z m 43.942 7.8232 h -28.702 v 12.5984 H 91.4205 V 82.7739 h 39.37 z m -10.668 -17.7292 h -18.1356 v 12.4968 h 18.1356 z" FillRule="Nonzero"/>
    </GeometryGroup>

</ResourceDictionary>